using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using AutomationScript;
using System.Threading;
using System.Runtime;
using System.Runtime.InteropServices;
using System.IO;
using System.Diagnostics;
using System.Xml.Linq;

namespace DemoApp {
	public partial class frmMain : Form {

		#region "Consts"

		private const string DESCRIPTION_1 = "This demo executes an automation script for automating Notepad. The main objectives are:" +
											  "1-. Create a text file, 2-. Modify it in notepad, 3-. Save the newly saved file, " +
											  "4-. Load file from the demo application";

		#endregion

		#region "Members"

		private string currentFile = string.Empty;
		private string inputTextFile = string.Format(@"{0}\..\..\Input\inputData.txt", Application.StartupPath);

		#endregion


		#region "Ctor"

		/// <summary>
		/// Initializes a new instance of the <see cref="frmMain"/> class.
		/// </summary>
		public frmMain() {
			InitializeComponent();
		}

		#endregion


		#region "Event Handlers"

		/// <summary>
		/// Handles the Click event of the btnRun control.
		/// </summary>
		/// <param name="sender">The source of the event.</param>
		/// <param name="e">The <see cref="System.EventArgs"/> instance containing the event data.</param>
		private void btnRun_Click(object sender, EventArgs e) {
			string path = string.Empty;

			if (cboScripts.SelectedIndex >= 0) {
				path = string.Format(@"{0}\..\..\Output\{1}\{2}.{3}",
					new object[] { Application.StartupPath, "Text", Guid.NewGuid().ToString().Substring(0, 8), "txt" });

				currentFile = path;

				RunAutomation(new object[] { cboScripts.SelectedIndex, path });
			}
		}

		/// <summary>
		/// Handles the SelectedIndexChanged event of the cboScripts control.
		/// </summary>
		/// <param name="sender">The source of the event.</param>
		/// <param name="e">The <see cref="System.EventArgs"/> instance containing the event data.</param>
		private void cboScripts_SelectedIndexChanged(object sender, EventArgs e) {
			txtDemoDescription.Text = cboScripts.SelectedIndex == 1 ? DESCRIPTION_1 : string.Empty;
			tipMain.SetToolTip(txtDemoDescription, txtDemoDescription.Text);
		}

		/// <summary>
		/// Handles the Load event of the frmMain control.
		/// </summary>
		/// <param name="sender">The source of the event.</param>
		/// <param name="e">The <see cref="System.EventArgs"/> instance containing the event data.</param>
		private void frmMain_Load(object sender, EventArgs e) {
			if (MessageBox.Show("In order to run this demo, an input file must be generated by querying WMI, do you want to continue?",
								"Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Question).Equals(DialogResult.Yes))
				GrabDemoInfo();
			else
				Close();
		}

		#endregion


		#region "Methods"

		/// <summary>
		/// Launches the application.
		/// </summary>
		/// <param name="appToLaunch">The app to launch.</param>
		/// <returns></returns>
		private int LaunchApplication(int appToLaunch) {
			int retval = 0;

			using (Process selectedApp = new Process()) {
				selectedApp.StartInfo = new ProcessStartInfo(string.Format(@"{0}\system32\notepad.exe",
											new object[] { Environment.GetFolderPath(Environment.SpecialFolder.Windows) }));
				selectedApp.Start();
				Thread.Sleep(1500); // Let's give it some time to load
				retval = selectedApp.MainWindowHandle.ToInt32();
			}
			return retval;
		}



		/// <summary>
		/// Grabs the demo info.
		/// </summary>
		private void GrabDemoInfo() {
			if (File.Exists(inputTextFile))
				File.Delete(inputTextFile);

			using (Process newProcess = new Process()) {
				if (Environment.OSVersion.Version.Build >= 6)
					newProcess.StartInfo = new ProcessStartInfo(@"systeminfo.exe") {
						UseShellExecute = false, RedirectStandardOutput = true
					};
				else
					newProcess.StartInfo = new ProcessStartInfo("wmic.exe", "computersystem") {
						UseShellExecute = false, RedirectStandardOutput = true
					};

				newProcess.Start();
				newProcess.WaitForExit();
				File.WriteAllText(inputTextFile, newProcess.StandardOutput.ReadToEnd());
			}
		}
		


		/// <summary>
		/// Runs the automation.
		/// </summary>
		/// <param name="data">The data.</param>
		private void RunAutomation(object data) {
			XDocument script = null;
			int selectedScript = ((int)((object[])data)[0]);
			string outputFile = ((object[])data)[1].ToString();
			IntPtr hWnd = new IntPtr(LaunchApplication(selectedScript));
			Engine automation = GetAutomationEngine(hWnd);
			string scriptFile = string.Format(@"{0}\..\..\Scripts\Demo{1}.xml", new object[] { Application.StartupPath, selectedScript });

			script = GetScript(scriptFile, outputFile);

			pgbExecution.Minimum =  pgbExecution.Value = 0;
			pgbExecution.Maximum = script.Element("autoscript").Elements().Count() + 1;  // Considering displaying the file

			automation.RunAutomationScript(script, IntPtr.Zero, AutomationEndCode);

			automation.OnAutomationExecuted -= retval_OnAutomationExecuted;
			automation.OnAutomationFailed -= retval_OnAutomationFailed;
			automation.OnMessageSentCompleted -= retval_OnMessageSentCompleted;
			automation.OnScriptStopped -= retval_OnScriptStopped;
		}


		/// <summary>
		/// Automations the end code.
		/// </summary>
		/// <param name="hWnd">The h WND.</param>
		/// <param name="args">The args.</param>
		private void AutomationEndCode(IntPtr hWnd, object args) {
			// Is everything Ok to proceed?
			for (int nRetry = 1; nRetry < 3; nRetry++) {
				if (File.Exists(currentFile) && OwnedForms.Length == 0) {
					pgbExecution.Value += 1;
					(new frmViewer(currentFile) {Owner = this}).Show();
					break;
				}
				Thread.Sleep(1500);
			}
		}

		/// <summary>
		/// Gets the script.
		/// </summary>
		/// <param name="selected">The selected.</param>
		/// <param name="outputFile">The output file.</param>
		/// <returns></returns>
		private XDocument GetScript(string selected, string outputFile) {
			XDocument retval = null;

			try {
				using (StringReader reader = new StringReader(string.Format(File.ReadAllText(selected),
					new object[] {DateTime.Now, File.ReadAllText(inputTextFile), outputFile })))
					retval = XDocument.Load(reader);
			} catch (Exception ex) {
				ShowExceptionHelper(ex);
			}

			return retval;
		}


		/// <summary>
		/// Shows the exception helper.
		/// </summary>
		/// <param name="ex">The ex.</param>
		private void ShowExceptionHelper(Exception ex) {
			MessageBox.Show(string.Format("Exception thrown due to: {0} - Stack Trace: {1}",
				new object[] { ex.Message, ex.StackTrace }), "Exception", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
		}


		#endregion

		#region "AutomationScript related"

		/// <summary>
		/// Gets the automation engine.
		/// </summary>
		/// <param name="hWnd">The h WND.</param>
		/// <returns></returns>
		private Engine GetAutomationEngine(IntPtr hWnd) {
			Engine retval = Engine.GetInstance(hWnd);
			retval.OnAutomationExecuted += retval_OnAutomationExecuted;
			retval.OnAutomationFailed += retval_OnAutomationFailed;
			retval.OnMessageSentCompleted += retval_OnMessageSentCompleted;
			retval.OnScriptStopped += retval_OnScriptStopped;

			return retval;
		}

		/// <summary>
		/// Retval_s the on script stopped.
		/// </summary>
		/// <param name="t">The t.</param>
		/// <param name="v">The v.</param>
		private void retval_OnScriptStopped(object t, Engine.AutomationStep v) {
			MessageBox.Show("Oops! Something went wrong - Script was stopped", "Information", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
		}

		/// <summary>
		/// Retval_s the on message sent completed.
		/// </summary>
		/// <param name="t">The t.</param>
		/// <param name="v">The v.</param>
		private void retval_OnMessageSentCompleted(IntPtr t, int v) {
			Trace.WriteLine(string.Format("Message sent- Return: {0}", v));
		}

		/// <summary>
		/// Retval_s the on automation failed.
		/// </summary>
		/// <param name="t">The t.</param>
		/// <param name="v">The v.</param>
		private void retval_OnAutomationFailed(Engine.AutomationStep t, Exception v) {
			MessageBox.Show("Oops! Something went wrong - Automation failed", "Information", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
		}

		/// <summary>
		/// Retval_s the on automation executed.
		/// </summary>
		/// <param name="t">The t.</param>
		/// <param name="v">The v.</param>
		private void retval_OnAutomationExecuted(uint t, IntPtr v) {
			pgbExecution.Value += 1;
		}

		#endregion

	}
}